 class Solution {
  public:
   void addleft(Node *root,vector<int>&ans){
       Node*temp=root->left;
       while(temp){
           if(!isLeaf(temp)) ans.push_back(temp->data);
           if(temp->left) temp=temp->left;
           else temp=temp->right;
       }

}

    void addleaf(Node*root,vector<int>&ans){
       if(isLeaf(root)){
           ans.push_back(root->data);
           return;
       }
        if(root->left) addleaf(root->left,ans);
        if(root->right) addleaf(root->right,ans);
    }
    bool isLeaf(Node*root){
        if(root->left||root->right) return false;
        else return true;
    }
    void addright(Node*root,vector<int>&ans){
        vector<int>temp;
        Node*curr=root->right;
        while(curr){
            if(!isLeaf(curr)) temp.push_back(curr->data);
            if(curr->right) curr=curr->right;
            else curr=curr->left;
        }
        for(int i=temp.size()-1;i>=0;i--){
            ans.push_back(temp[i]);
        }
    }
    vector<int> boundaryTraversal(Node *root) {
        // code here
        vector<int>ans;
        if(root==NULL) return ans;
        if(!isLeaf(root)) ans.push_back(root->data);
        addleft(root,ans);
        addleaf(root,ans);
        addright(root,ans);
        return ans;
    }
};
