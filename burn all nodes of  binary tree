class Solution {
  public:
   unordered_map<int,Node*>mpp;
    void function(Node*root,Node*&targetnode,int target){
         queue<Node*>q;
        q.push(root);
        
        while(!q.empty()){
            int n=q.size();
            for(int i=0;i<n;i++){
                Node*ele=q.front();
                q.pop();
                
                if(ele->data==target){
                    targetnode=ele;
                }
                if(ele->left){
                    mpp[ele->left->data]=ele;
                    q.push(ele->left);
                }
                if(ele->right){
                    mpp[ele->right->data]=ele;
                    q.push(ele->right);
                }
            }
    }
    }
    int minTime(Node* root, int target) {
        // code herevector<>
        int k=-1;
         queue<Node*>q;
        if(root==NULL) return 0;
        Node*targetnode=nullptr;
        function(root,targetnode,target);
       
            unordered_map<int,int>visited;
            q.push(targetnode);
            visited[targetnode->data]=1;
            while(!q.empty()){
                int size=q.size();
                 k++;
                for(int i=0;i<size;i++){
                    Node*node=q.front();
                    q.pop();
                    visited[node->data]=1;
                   
                    if(node->left && !visited[node->left->data]){
                        q.push(node->left);
                    }
                    if(node->right && !visited[node->right->data]){
                        q.push(node->right);
                    }
                    if(mpp[node->data]&& !visited[mpp[node->data]->data]){
                        q.push(mpp[node->data]);
                    }
                }
            }
            return k;
        }
    
};
